@startuml
abstract Enemigo {
- velocidad: int
- dañoCausado: int
- energíaInicial: int
- creditosOtorgados: int
- coordenadas: Coordenadas
+ recibirDaño()
+ cantidadCreditosOtorgados(): int
+ moverEnemigo()
+ acumularMuertos()
+ agregarIndiceDelEnemigoMuerto()
}

class Hormiga {
+ acumularMuertos()
+ cantidadCreditosOtorgados(): int
+ moverEnemigo()
+ getCoordenadasLargada()
+ getCoordenadasMeta()
}

class Araña {
+ acumularMuertos()
+ cantidadCreditosOtorgados(): int
+ moverEnemigo()
+ getCoordenadasLargada()
+ getCoordenadasMeta()
}

class Juego {
- mapa: Mapa
- numeroDeTurno: int
- cantidadDeHormigasMuertas: int
+ avanzarTurno()
+ agregarEnemigo()
+ juegoTerminado()
+ obtenerCreditosYEliminarEnemigosAlFinalizarTurno()
+ contarMuertosEnElTurnoActual()
+ actualizarEnergiaJugador()
}

class Inicializador {
+ agregarJugador()
+ iniciarPartida()
}

abstract Defensa {
- nombre
- costo
- tiempoDeConstruccion
- rangoDeAtaque
- danio
- tierra
+ atacarEnemigo(enemigo: Enemigo)
+ construir(parcela:Parcela, numeroDeTurno:int)
+ pasarTurno()
}

class TorreBlanca {
+ atacarEnemigo(enemigo: Enemigo)
+ construir(parcela:Parcela, numeroDeTurno:int)
}

class TorrePlateada {
+ atacarEnemigo(enemigo: Enemigo)
+ construir(parcela:Parcela, numeroDeTurno:int)
}

class Jugador {
- nombre
- cantidadDeCreditos: int
- puntosDeVida: int
+ actualizarDefensasAlFinalizarTurno()
+ agregarCreditosAlMatarEnemigos()
+ generarConstruccion()
+ estaVivo()
+ restarEnergia()
}


interface EstadoDefensa {
+atacarEnemigo(e: Enemigo, rangoDeAtaque, daño, coordenadasDefensa)
+estaTerminada()
}

class EnConstruccion {
- tiempoDeConstruccion: int
+atacarEnemigo(e: Enemigo, rangoDeAtaque, daño, coordenadasDefensa)
+pasarTurno(): EstadoDefensa
}

class Terminada {
- tiempoDeConstruccion: int
+atacarEnemigo(e: Enemigo, rangoDeAtaque, daño, coordenadasDefensa)
+estaEnRango(coordernadasEnemigo, coordenadasDefensa, rangoDeAtaque)
+pasarTurno(): EstadoDefensa
}


interface EstadoEnemigo {
+ acumularHormigasMuertas(hormigasMuertas: ArrayList<Enemigo>, enemigo: Hormiga)
+ agregarIndiceDeEnemigoMuerto(indicesEnemigosMuertos: List<Integer>, posicionActual: int)
+ mover(velocidad:int)
+ recibirDanio(danio: int): EstadoEnemigo
}

class Vivo {
- energia: int
+ acumularHormigasMuertas(hormigasMuertas: ArrayList<Enemigo>, enemigo: Hormiga)
+ agregarIndiceDeEnemigoMuerto(indicesEnemigosMuertos: List<Integer>, posicionActual: int)
+ creditosOtorgados(creditos: int)
+ mover(velocidad:int)
+ recibirDanio(danio: int): EstadoEnemigo
}

class Muerto {
- energia: int
+ acumularHormigasMuertas(hormigasMuertas: ArrayList<Enemigo>, enemigo: Hormiga)
+ agregarIndiceDeEnemigoMuerto(indicesEnemigosMuertos: List<Integer>, posicionActual: int)
+ creditosOtorgados(creditos: int)
+ mover(velocidad:int)
+ recibirDanio(danio: int): EstadoEnemigo
}

EstadoEnemigo <|.. Vivo
EstadoEnemigo <|.. Muerto

EstadoDefensa <|.. EnConstruccion
EstadoDefensa <|.. Terminada

Defensa <|-- TorreBlanca
Defensa <|-- TorrePlateada



Enemigo <|-- Hormiga
Enemigo <|-- Araña

Juego <- Inicializador
Juego "1" --> "0..*" Enemigo
Jugador <- Juego
Jugador "1" --> "0..*" Defensa
Defensa .> Enemigo
Defensa --> EstadoDefensa
Enemigo --> EstadoEnemigo
@enduml
