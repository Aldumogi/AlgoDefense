@startuml
abstract Enemigo {
- velocidad: int
- dañoCausado: int
- creditosOtorgados: int
- coordenadas: Coordenadas
- estado: EstadoEnemigo
- cantidadDeMovimientosRealizados
- coeficienteDeRalentizacion
+ cantidadCreditosOtorgados(): int
+ acumularMuertos()
+ agregarIndiceDelEnemigoMuerto()
+ mover(m: Mapa)
+ recibirRalentizacion(coeficienteDeRalentizacion: int)
+ recibirDaño()
- actualizarVelocidadSegunCantidadDeMovimientos
- restaurarVelocidadNormal()
}

class Hormiga {
+ acumularMuertos()
+ cantidadCreditosOtorgados(): int
+ moverEnemigo()
+ getCoordenadasLargada()
+ getCoordenadasMeta()
}

class Araña {
+ acumularMuertos()
+ cantidadCreditosOtorgados(): int
+ moverEnemigo()
+ getCoordenadasLargada()
+ getCoordenadasMeta()
}

class Juego {
- mapa: Mapa
- numeroDeTurno: int
- cantidadDeHormigasMuertas: int
+ actualizarEnergiaJugador()
+ avanzarTurno()
+ agregarEnemigo()
+ agregarEnemigosDelTurno()
+ avanzarEnemigos()
+ eliminarEnemigosMuertos()
+ juegoTerminado()
+ moverEnemigosAMeta()
}

class Turno {
- listaEnemigosAgregados
- turnoId
+ agregarEnemigos(cantidadHormigas, cantArañas, coordenadasLargada)
}

class Inicializador {
+ Inicializador(filepath: String)
+ Inicializador(turnos: Turno)
+ Inicializador(jsonEnemigos: String, jsonMapa: String)
+ agregarJugador()
}

interface Defensa {
+ construir(mapa: Mapa, coordenadas: Coordenadas)
+ pasarTurno(enemigos, hormigasAsesinadas, defensas, mapa, trampasAEliminar)
}

class TrampaArenosa {
- nombre
- costo
- tiempoDeConstruccion
- estado: EstadoDefensa
- coordenadas
- tiempoDeRalentizacion
- factorDeRalentizacion
+ construir(m: Mapa, c: Coordenadas)
+ pasarTurno(enemigos, hormigasAsesinadas, defensas, mapa, trampasAEliminar)
}

class Torre {
- nombre
- costo
- tiempoDeConstruccion
- rangoDeAtaque
- danio
- estado: EstadoDefensa
- tiempoDeRalentizacion
- factorDeRalentizacion
+ atacarEnemigo(e: Enemigo)
+ construir(m: Mapa, c: Coordenadas)
+ pasarTurno(enemigos, hormigasAsesinadas, defensas, mapa, trampasAEliminar)
}

class TorreBlanca {
+ atacarEnemigo(enemigo: Enemigo)
+ construir(m:Mapa, c:Coordenadas)
}

class TorrePlateada {
+ atacarEnemigo(enemigo: Enemigo)
+ construir(m:Mapa, c:Coordenadas)
}

class Jugador {
- nombre
- cantidadDeCreditos: int
- puntosDeVida: int
- hormigasAsesinadas: Hormiga
+ actualizarDefensasAlFinalizarTurno()
+ finalizarTurno(enemigos: Enemigo, m: Mapa)
+ generarConstruccion(d: Defensa, c: Coordenadas, m: Mapa)
+ estaVivo()
+ restarEnergia()
- agregarCreditosAlMatarEnemigos()
}

Defensa <|-- TrampaArenosa
Defensa <|-- Torre
Torre <|-- TorreBlanca
Torre <|-- TorrePlateada



Enemigo <|-- Hormiga
Enemigo <|-- Araña

Juego <- Inicializador
Juego "1" --> "0..*" Enemigo
Juego "1" --> "0..*" Turno
Jugador <- Juego
Jugador "1" --> "0..*" Defensa
Defensa .> Enemigo
@enduml
